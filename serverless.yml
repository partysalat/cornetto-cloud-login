
service: mehrnebel # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3
  memorySize: 256
  stage: local
  region: eu-central-1
  profile: default
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:*:*:table/usersFogTable-${opt:stage, self:provider.stage}
    - Effect: Allow
      Action:
        - iot:Publish
      Resource: arn:aws:iot:*:*:topic/mehrnebel
  environment: ${file(./config/config.yml):${opt:stage, self:provider.stage}}



plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline


custom:
  webpack: ./webpack.server.config.js
  webpackIncludeModules: true
  dynamodb:
    start:
      migrate: true
      port: 8000
  serverless-offline:
    port: 2999
    babelOptions:
      presets: ["es2015", "stage-2"]

functions:
  index:
    handler: lib/server/handlers/indexHandler.login
    events:
      - http:
          method: GET
          path: /
          integration: lambda
          request: ${file(./serverless.templates.yml):request-html}
          response: ${file(./serverless.templates.yml):response-html}
      - http:
          method: GET
          path: /buzzer
          integration: lambda
          request: ${file(./serverless.templates.yml):request-html}
          response: ${file(./serverless.templates.yml):response-html}
  createFog:
    handler: lib/server/handlers/pushHandler.createFog
    events:
      - http:
          method: PUT
          path: /api/create-fog
          integration: lambda
          authorizer:
            arn: ${cf:login-cognito-userpool.cognitoArnPool}
            claims:
              - email
              - name
              - cognito:username
  getUser:
    handler: lib/server/handlers/pushHandler.getUser
    events:
      - http:
          method: GET
          path: /api/user
          integration: lambda
          authorizer:
            arn: ${cf:login-cognito-userpool.cognitoArnPool}
            claims:
              - email
              - name
              - cognito:username

resources:
   Resources:
     userStatsTable:
       Type: AWS::DynamoDB::Table
       Properties:
         TableName: usersFogTable-${opt:stage, self:provider.stage}
         AttributeDefinitions:
           - AttributeName: username
             AttributeType: S
         KeySchema:
           - AttributeName: username
             KeyType: HASH
         ProvisionedThroughput:
           ReadCapacityUnits: 1
           WriteCapacityUnits: 1

   Outputs:
      UsersStatsTableName:
        Description: The Id of the restapi
        Value:
          'Ref': userStatsTable
      ApiGatewayRestApiId:
        Description: The Id of the restapi
        Value:
          'Ref': ApiGatewayRestApi
