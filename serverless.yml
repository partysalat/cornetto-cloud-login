
service: mehrnebel # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3
  memorySize: 256
  stage: local
  region: eu-central-1
#  profile: default
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:*:*:table/usersFogTable-${opt:stage, self:provider.stage}
    - Effect: Allow
      Action:
        - iot:Publish
      Resource: arn:aws:iot:*:*:topic/mehrnebel
  environment: ${file(./config/config.yml):${opt:stage, self:provider.stage}}



plugins:
  - serverless-webpack
#  - serverless-dynamodb-local
  - serverless-offline
  - serverless-s3-sync


custom:
  webpack: ./webpack/webpack.server.config.js
  webpackIncludeModules: true
  s3Sync:
    - bucketName: ${cf:mehrnebel-assets.pageBucketName}
      localDir: target
      acl: public-read # optional
#      followSymlinks: true # optional
      defaultContentType: text/html # optional
      params: # optional
      - index.html:
          CacheControl: 'no-cache'
#      - "*.js":
#          CacheControl: 'public, max-age=31536000'
  dynamodb:
    start:
      migrate: true
      port: 8000
  serverless-offline:
    port: 2999
    babelOptions:
      presets: ["es2015", "stage-2"]

functions:
  createFog:
    handler: lib/server/handlers/pushHandler.createFog
    events:
      - http:
          method: PUT
          path: /api/create-fog
          integration: lambda
          authorizer:
            arn: ${cf:login-cognito-userpool.cognitoArnPool}
            claims:
              - email
              - name
              - cognito:username
  getConfig:
    handler: lib/server/handlers/pushHandler.getConfig
    events:
      - http:
          method: GET
          path: /api/config
          integration: lambda
  getUser:
    handler: lib/server/handlers/pushHandler.getUser
    events:
      - http:
          method: GET
          path: /api/user
          integration: lambda
          authorizer:
            arn: ${cf:login-cognito-userpool.cognitoArnPool}
            claims:
              - email
              - name
              - cognito:username

resources:
   Resources:
     userStatsTable:
       Type: AWS::DynamoDB::Table
       Properties:
         TableName: usersFogTable-${opt:stage, self:provider.stage}
         AttributeDefinitions:
           - AttributeName: username
             AttributeType: S
         KeySchema:
           - AttributeName: username
             KeyType: HASH
         ProvisionedThroughput:
           ReadCapacityUnits: 1
           WriteCapacityUnits: 1

   Outputs:
      UsersStatsTableName:
        Description: The Id of the restapi
        Value:
          'Ref': userStatsTable
      ApiGatewayRestApiId:
        Description: The Id of the restapi
        Value:
          'Ref': ApiGatewayRestApi
